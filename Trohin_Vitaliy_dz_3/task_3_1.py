"""
Задание 1.
Реализуйте функции:
a) заполнение списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   заполнение словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
b) получение элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   получение элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
с) удаление элемента списка, оцените сложность в O-нотации (операции нужно провдить в цикле)
   удаление элемента словаря, оцените сложность в O-нотации (операции нужно провдить в цикле)
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга
Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""

import time

some_list = []
some_dict = {}


def time_decor(func):
    def fun(arg):
        start = time.time()
        print(func(arg))
        end = time.time()
        print(f'Время выполнения {func.__name__}: {end - start} с.')
    return fun

# a)


@time_decor
def filling_list(num_max):       # O(n)
    """Заполнение списка"""
    for i in range(0, num_max):  # O(n)
        some_list.append(i)      # O(1)
    return f'Создан список со значениями от 0 до {num_max}.'


@time_decor
def filling_dict(num_max):       # O(n)
    """Заполнение словаря"""
    for i in range(0, num_max):  # O(n)
        some_dict[i] = i         # O(1)
    return f'Создан словарь с парами ключ-значение от 0 до {num_max}.'


filling_list(1000000)
filling_dict(1000000)
print('Сложность функций одинаковая. Список заполняется быстрее словаря, т.к. ключи словаря хешируемые объекты \n')

# b)


@time_decor
def search_list(num_search):         # O(n)
    """Поиск значения по списку"""
    for i in range(len(some_list)):  # O(n)
        if i == num_search:          # O(1)
            return f'Найдено значение {some_list[i]} в списке.'
    return f'{num_search} такого значения нет в списке.'


@time_decor
def search_dict(num_search):              # O(n)
    """Поиск значения по ключу словаря"""
    for key in some_dict:                 # O(n)
        if some_dict[key] == num_search:  # O(1)
            return f'Найдено значение {some_dict[num_search]} в словаре.'
    return f'{num_search} такого ключа нет в словаре.'


search_list(999880)
search_dict(999880)
print('Сложность функций одинаковая. Поиск по списку работает быстрее поиска по словарю. \n')

# c)


@time_decor
def del_list(num_del):        # O(n)
    """Удаление значения из списка"""
    for i in range(num_del):  # O(n)
        some_list.pop(i)      # O(1)
    return f'Удалено {num_del} значений.'


@time_decor
def del_dict(num_del):        # O(n)
    """Удаление значения из словаря"""
    for i in range(num_del):  # O(n)
        some_dict.pop(i)      # O(1)
    return f'Удалено {num_del} значений.'


del_list(999)
del_dict(999)
print('Сложность функций одинаковая. Удаление элементов из словаря работает быстрее, чем удаление элементов из списка.')
